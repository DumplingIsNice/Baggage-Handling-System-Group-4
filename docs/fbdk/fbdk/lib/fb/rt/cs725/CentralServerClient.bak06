/* Copyright (c)2022 Rockwell Automation. All rights reserved. */
package fb.rt.cs725;
import fb.datatype.*;
import fb.rt.*;
import fb.rt.events.*;
/** FUNCTION_BLOCK CentralServerClient
  * @author JHC
  * @version 20221021/JHC
  */
public class CentralServerClient extends FBInstance
{
/** Input event qualifier */
  public BOOL PE = new BOOL();
/** VAR Block */
  public BOOL Block = new BOOL();
/** VAR Candidate */
  public BOOL Candidate = new BOOL();
/** Output event qualifier */
  public BOOL MotoRotate = new BOOL();
/** VAR BlockCon */
  public BOOL BlockCon = new BOOL();
/** VAR lastPE */
  public BOOL lastPE = new BOOL();
/** VAR lastBlock */
  public BOOL lastBlock = new BOOL();
/** Initialization Request */
 public EventServer INIT = new EventInput(this);
/** Normal Execution Request */
 public EventServer REQ = new EventInput(this);
/** EVENT CAS_STOP */
 public EventServer CAS_STOP = new EventInput(this);
/** EVENT CAS_START */
 public EventServer CAS_START = new EventInput(this);
/** EVENT F_SERVER */
 public EventServer F_SERVER = new EventInput(this);
/** Initialization Confirm */
 public EventOutput INITO = new EventOutput();
/** Execution Confirmation */
 public EventOutput CNF = new EventOutput();
/** EVENT STOP */
 public EventOutput STOP = new EventOutput();
/** EVENT START */
 public EventOutput START = new EventOutput();
/** EVENT REQ_TOKEN */
 public EventOutput REQ_TOKEN = new EventOutput();
/** EVENT RET_TOKEN */
 public EventOutput RET_TOKEN = new EventOutput();
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
*/
  public EventServer eiNamed(String s){
    if("INIT".equals(s)) return INIT;
    if("REQ".equals(s)) return REQ;
    if("CAS_STOP".equals(s)) return CAS_STOP;
    if("CAS_START".equals(s)) return CAS_START;
    if("F_SERVER".equals(s)) return F_SERVER;
    return super.eiNamed(s);}
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
*/
  public EventOutput eoNamed(String s){
    if("INITO".equals(s)) return INITO;
    if("CNF".equals(s)) return CNF;
    if("STOP".equals(s)) return STOP;
    if("START".equals(s)) return START;
    if("REQ_TOKEN".equals(s)) return REQ_TOKEN;
    if("RET_TOKEN".equals(s)) return RET_TOKEN;
    return super.eoNamed(s);}
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
* @throws FBRManagementException {@inheritDoc}
*/
  public ANY ivNamed(String s) throws FBRManagementException{
    if("PE".equals(s)) return PE;
    if("Block".equals(s)) return Block;
    if("Candidate".equals(s)) return Candidate;
    return super.ivNamed(s);}
/** {@inheritDoc}
* @param s {@inheritDoc}
* @return {@inheritDoc}
* @throws FBRManagementException {@inheritDoc}
*/
  public ANY ovNamed(String s) throws FBRManagementException{
    if("MotoRotate".equals(s)) return MotoRotate;
    if("BlockCon".equals(s)) return BlockCon;
    return super.ovNamed(s);}
/** {@inheritDoc}
* @param ivName {@inheritDoc}
* @param newIV {@inheritDoc}
* @throws FBRManagementException {@inheritDoc} */
  public void connectIV(String ivName, ANY newIV)
    throws FBRManagementException{
    if("PE".equals(ivName)) connect_PE((BOOL)newIV);
    else if("Block".equals(ivName)) connect_Block((BOOL)newIV);
    else if("Candidate".equals(ivName)) connect_Candidate((BOOL)newIV);
    else super.connectIV(ivName, newIV);
    }
/** Connect the given variable to the input variable PE
  * @param newIV The variable to connect
 */
  public void connect_PE(BOOL newIV){
    PE = newIV;
    }
/** Connect the given variable to the input variable Block
  * @param newIV The variable to connect
 */
  public void connect_Block(BOOL newIV){
    Block = newIV;
    }
/** Connect the given variable to the input variable Candidate
  * @param newIV The variable to connect
 */
  public void connect_Candidate(BOOL newIV){
    Candidate = newIV;
    }
private static final int index_START = 0;
private void state_START(){
  eccState = index_START;
}
private static final int index_INIT = 1;
private void state_INIT(){
  eccState = index_INIT;
  alg_INIT();
  INITO.serviceEvent(this);
  CNF.serviceEvent(this);
state_START();
}
private static final int index_REQ = 2;
private void state_REQ(){
  eccState = index_REQ;
  alg_REQ();
  CNF.serviceEvent(this);
  STOP.serviceEvent(this);
  REQ_TOKEN.serviceEvent(this);
}
private static final int index_CAS_START = 3;
private void state_CAS_START(){
  eccState = index_CAS_START;
  alg_START();
  START.serviceEvent(this);
  CNF.serviceEvent(this);
state_START();
}
private static final int index_CAS_STOP = 4;
private void state_CAS_STOP(){
  eccState = index_CAS_STOP;
  alg_STOP();
  STOP.serviceEvent(this);
  CNF.serviceEvent(this);
state_START();
}
private static final int index_TOKEN_RECEIVED = 5;
private void state_TOKEN_RECEIVED(){
  eccState = index_TOKEN_RECEIVED;
  alg_TOKEN_REC();
  CNF.serviceEvent(this);
  START.serviceEvent(this);
}
private static final int index_TOKEN_RETURN = 6;
private void state_TOKEN_RETURN(){
  eccState = index_TOKEN_RETURN;
  alg_TOKEN_RETURN();
  RET_TOKEN.serviceEvent(this);
state_START();
}
private static final int index_CAS_STOP_2 = 7;
private void state_CAS_STOP_2(){
  eccState = index_CAS_STOP_2;
  alg_STOP();
  CNF.serviceEvent(this);
  STOP.serviceEvent(this);
}
/** The default constructor. */
public CentralServerClient(){
    super();
    lastPE.initializeNoException("1");
    lastBlock.initializeNoException("0");
  }
/** {@inheritDoc}
* @param e {@inheritDoc} */
  public void serviceEvent(EventServer e){
    if (e == INIT) service_INIT();
    else if (e == REQ) service_REQ();
    else if (e == CAS_STOP) service_CAS_STOP();
    else if (e == CAS_START) service_CAS_START();
    else if (e == F_SERVER) service_F_SERVER();
  }
/** Services the INIT event. */
  public void service_INIT(){
    if ((eccState == index_START)) state_INIT();
  }
/** Services the REQ event. */
  public void service_REQ(){
    if ((eccState == index_START) && (!PE.value)) state_REQ();
    else if ((eccState == index_TOKEN_RECEIVED) && (PE.value)) state_TOKEN_RETURN();
  }
/** Services the CAS_STOP event. */
  public void service_CAS_STOP(){
    if ((eccState == index_START)) state_CAS_STOP();
    else if ((eccState == index_TOKEN_RECEIVED)) state_CAS_STOP_2();
  }
/** Services the CAS_START event. */
  public void service_CAS_START(){
    if ((eccState == index_START)) state_CAS_START();
    else if ((eccState == index_CAS_STOP_2)) state_TOKEN_RECEIVED();
  }
/** Services the F_SERVER event. */
  public void service_F_SERVER(){
    if ((eccState == index_REQ)) state_TOKEN_RECEIVED();
  }
  /** ALGORITHM INIT IN ST*/
public void alg_INIT(){
MotoRotate.value=true;
Block.value=false;
}
  /** ALGORITHM REQ IN Java*/
public void alg_REQ(){
System.out.println("----------------");
System.out.println("BAG DETECTED BY " + this);
System.out.println("----------------");
MotoRotate.value=false;

}
  /** ALGORITHM START IN Java*/
public void alg_START(){
MotoRotate.value=true;

}
  /** ALGORITHM STOP IN Java*/
public void alg_STOP(){
MotoRotate.value=false;

}
  /** ALGORITHM TOKEN_REC IN Java*/
public void alg_TOKEN_REC(){
MotoRotate.value=true;
System.out.println("----------------");
System.out.println("TOKEN RECEIVED IN CS 1 BY" + this);
System.out.println("----------------");

}
  /** ALGORITHM TOKEN_RETURN IN Java*/
public void alg_TOKEN_RETURN(){
System.out.println("----------------");
System.out.println("TOKEN IS BEING RETURNED BY this");
System.out.println("----------------");

}
}
